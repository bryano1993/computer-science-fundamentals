1. What is time complexity and what is its relation to algorithms?

- It's a function that estimates the time it takes for a program to execute in relation to the variable n.

2. What is runtime?

- It is a physical time duration of an algorithm; it is also synonymous with time complexity.

3.How is the runtime of an algorithm calculated?

- You add up how many instructions the algorithm will execute as a function of the size of its input, then simplify the expression to the largest term and drop any constants.

4.Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

I used O(n!) and listed it in the bottom as least efficient


O(1)
O(log n)
O(n)
O(n log n)
O(n^2)
O(2^n)
O(n!)


5.Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

O(1) time 
 - Accessing Array Index (int a = ARR[5];)
 - Inserting a node in Linked List
 - Pushing and Popping on Stack
 - Insertion and Removal from Queue
 - Finding out the parent or left/right child of a node in a tree stored in Array
 - Jumping to Next/Previous element in Doubly Linked List
and you can find a million more such examples..

6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

O(n)

7. Determine the time complexity of the following snippet of code.

If you get stuck, read through the graphical representation section again.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

O(n^2)

8.Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

O(2^n)

9.Out of the code snippets you just saw, which is the most time efficient?

O(n)